from flask import Flask, render_template, request, jsonify, session, redirect, url_for
import json
import os
from datetime import datetime

app = Flask(__name__)
app.secret_key = 'your-secret-key-change-this-in-production'

# Database files
PRODUCTS_DB = "data/products.json"
USERS_DB = "data/users.json"
ORDERS_DB = "data/orders.json"

def init_database():
    """Initialize database files with sample data"""
    os.makedirs("data", exist_ok=True)
    
    # Sample products
    if not os.path.exists(PRODUCTS_DB):
        products = [
            {
                "id": 1, 
                "name": "Gaming Laptop", 
                "price": 1299.99, 
                "category": "Electronics",
                "image": "üíª",
                "description": "High-performance gaming laptop with RTX 4060",
                "stock": 15
            },
            {
                "id": 2, 
                "name": "Wireless Mouse", 
                "price": 49.99, 
                "category": "Electronics",
                "image": "üñ±Ô∏è",
                "description": "Ergonomic wireless mouse with RGB lighting",
                "stock": 50
            },
            {
                "id": 3, 
                "name": "Mechanical Keyboard", 
                "price": 89.99, 
                "category": "Electronics",
                "image": "‚å®Ô∏è",
                "description": "Mechanical keyboard with blue switches",
                "stock": 30
            },
            {
                "id": 4, 
                "name": "Smartphone", 
                "price": 799.99, 
                "category": "Electronics",
                "image": "üì±",
                "description": "Latest smartphone with 5G capability",
                "stock": 25
            },
            {
                "id": 5, 
                "name": "Coffee Mug", 
                "price": 14.99, 
                "category": "Home",
                "image": "‚òï",
                "description": "Ceramic coffee mug with funny design",
                "stock": 100
            },
            {
                "id": 6, 
                "name": "T-Shirt", 
                "price": 24.99, 
                "category": "Clothing",
                "image": "üëï",
                "description": "100% cotton t-shirt, various sizes available",
                "stock": 75
            }
        ]
        with open(PRODUCTS_DB, 'w') as f:
            json.dump(products, f, indent=2)
    
    # Initialize other databases
    if not os.path.exists(USERS_DB):
        with open(USERS_DB, 'w') as f:
            json.dump([], f)
    if not os.path.exists(ORDERS_DB):
        with open(ORDERS_DB, 'w') as f:
            json.dump([], f)

def load_json(filepath):
    """Load JSON data from file"""
    try:
        with open(filepath, 'r') as f:
            return json.load(f)
    except:
        return []

def save_json(filepath, data):
    """Save data to JSON file"""
    with open(filepath, 'w') as f:
        json.dump(data, f, indent=2)

def get_cart_details():
    """Get cart items with totals"""
    cart = session.get('cart', {})
    products = load_json(PRODUCTS_DB)
    
    cart_items = []
    total = 0
    
    for product_id, quantity in cart.items():
        product = next((p for p in products if p['id'] == int(product_id)), None)
        if product:
            item_total = product['price'] * quantity
            total += item_total
            cart_items.append({
                'product': product,
                'quantity': quantity,
                'total': item_total
            })
    
    return cart_items, total

# ==================== ADMIN ROUTES ====================
@app.route('/admin')
def admin_dashboard():
    """Admin dashboard"""
    products = load_json(PRODUCTS_DB)
    orders = load_json(ORDERS_DB)
    
    total_products = len(products)
    total_orders = len(orders)
    total_revenue = sum(order['total'] for order in orders)
    
    recent_orders = orders[-5:]  # Last 5 orders
    
    return render_template('admin/dashboard.html',
                         total_products=total_products,
                         total_orders=total_orders,
                         total_revenue=total_revenue,
                         recent_orders=recent_orders)

@app.route('/admin/products')
def admin_products():
    """Admin products management"""
    products = load_json(PRODUCTS_DB)
    categories = list(set(p['category'] for p in products))
    return render_template('admin/products.html', products=products, categories=categories)

@app.route('/admin/products/add', methods=['GET', 'POST'])
def admin_add_product():
    """Add new product"""
    if request.method == 'POST':
        products = load_json(PRODUCTS_DB)
        
        new_product = {
            'id': max([p['id'] for p in products]) + 1 if products else 1,
            'name': request.form['name'],
            'price': float(request.form['price']),
            'category': request.form['category'],
            'image': request.form['image'],
            'description': request.form['description'],
            'stock': int(request.form['stock'])
        }
        
        products.append(new_product)
        save_json(PRODUCTS_DB, products)
        return redirect('/admin/products')
    
    products = load_json(PRODUCTS_DB)
    categories = list(set(p['category'] for p in products))
    return render_template('admin/add_product.html', categories=categories)

@app.route('/admin/products/edit/<int:product_id>', methods=['GET', 'POST'])
def admin_edit_product(product_id):
    """Edit product"""
    products = load_json(PRODUCTS_DB)
    product = next((p for p in products if p['id'] == product_id), None)
    
    if not product:
        return "Product not found", 404
    
    if request.method == 'POST':
        product['name'] = request.form['name']
        product['price'] = float(request.form['price'])
        product['category'] = request.form['category']
        product['image'] = request.form['image']
        product['description'] = request.form['description']
        product['stock'] = int(request.form['stock'])
        
        save_json(PRODUCTS_DB, products)
        return redirect('/admin/products')
    
    categories = list(set(p['category'] for p in products))
    return render_template('admin/edit_product.html', product=product, categories=categories)

@app.route('/admin/products/delete/<int:product_id>')
def admin_delete_product(product_id):
    """Delete product"""
    products = load_json(PRODUCTS_DB)
    products = [p for p in products if p['id'] != product_id]
    save_json(PRODUCTS_DB, products)
    return redirect('/admin/products')

@app.route('/admin/orders')
def admin_orders():
    """Admin orders management"""
    orders = load_json(ORDERS_DB)
    return render_template('admin/orders.html', orders=orders)

@app.route('/admin/orders/update_status/<int:order_id>', methods=['POST'])
def admin_update_order_status(order_id):
    """Update order status"""
    orders = load_json(ORDERS_DB)
    order = next((o for o in orders if o['id'] == order_id), None)
    
    if order:
        order['status'] = request.json['status']
        save_json(ORDERS_DB, orders)
        return jsonify({'success': True})
    
    return jsonify({'success': False, 'message': 'Order not found'})

@app.route('/admin/categories')
def admin_categories():
    """Manage categories"""
    products = load_json(PRODUCTS_DB)
    categories = list(set(p['category'] for p in products))
    return render_template('admin/categories.html', categories=categories)

@app.route('/admin/categories/add', methods=['POST'])
def admin_add_category():
    """Add new category"""
    new_category = request.json['category']
    # Categories are managed through products, so we just redirect to products page
    return jsonify({'success': True})

# ==================== CUSTOMER ROUTES ====================
@app.route('/')
def home():
    """Home page"""
    products = load_json(PRODUCTS_DB)
    featured_products = products[:4]
    return render_template('index.html', featured_products=featured_products)

@app.route('/products')
def products():
    """Products page with filtering"""
    category = request.args.get('category', '')
    products = load_json(PRODUCTS_DB)
    
    if category:
        products = [p for p in products if p['category'].lower() == category.lower()]
    
    categories = list(set(p['category'] for p in load_json(PRODUCTS_DB)))
    return render_template('products.html', products=products, categories=categories, selected_category=category)

@app.route('/product/<int:product_id>')
def product_detail(product_id):
    """Product detail page"""
    products = load_json(PRODUCTS_DB)
    product = next((p for p in products if p['id'] == product_id), None)
    if not product:
        return "Product not found", 404
    return render_template('product_detail.html', product=product)

@app.route('/add_to_cart', methods=['POST'])
def add_to_cart():
    """Add item to cart"""
    product_id = int(request.json['product_id'])
    quantity = int(request.json.get('quantity', 1))
    
    products = load_json(PRODUCTS_DB)
    product = next((p for p in products if p['id'] == product_id), None)
    
    if not product:
        return jsonify({'success': False, 'message': 'Product not found'})
    
    if product['stock'] < quantity:
        return jsonify({'success': False, 'message': 'Not enough stock'})
    
    # Initialize cart in session
    if 'cart' not in session:
        session['cart'] = {}
    
    cart = session['cart']
    product_key = str(product_id)
    
    if product_key in cart:
        cart[product_key] += quantity
    else:
        cart[product_key] = quantity
    
    session['cart'] = cart
    session.modified = True
    
    return jsonify({'success': True, 'message': 'Added to cart!', 'cart_count': sum(cart.values())})

@app.route('/cart')
def view_cart():
    """View shopping cart"""
    cart_items, total = get_cart_details()
    return render_template('cart.html', cart_items=cart_items, total=total)

@app.route('/update_cart', methods=['POST'])
def update_cart():
    """Update cart quantities"""
    product_id = str(request.json['product_id'])
    quantity = int(request.json['quantity'])
    
    if quantity <= 0:
        if 'cart' in session and product_id in session['cart']:
            del session['cart'][product_id]
    else:
        if 'cart' in session and product_id in session['cart']:
            session['cart'][product_id] = quantity
    
    session.modified = True
    return jsonify({'success': True})

@app.route('/remove_from_cart/<int:product_id>')
def remove_from_cart(product_id):
    """Remove item from cart"""
    if 'cart' in session and str(product_id) in session['cart']:
        del session['cart'][str(product_id)]
        session.modified = True
    
    return redirect(url_for('view_cart'))

@app.route('/checkout', methods=['GET', 'POST'])
def checkout():
    """Checkout process"""
    cart_items, total = get_cart_details()
    
    if request.method == 'POST':
        # Process order
        name = request.form['name']
        email = request.form['email']
        address = request.form['address']
        payment_method = request.form['payment_method']
        
        # Get cart items
        cart = session.get('cart', {})
        products = load_json(PRODUCTS_DB)
        
        order_items = []
        order_total = 0
        
        for product_id, quantity in cart.items():
            product = next((p for p in products if p['id'] == int(product_id)), None)
            if product:
                item_total = product['price'] * quantity
                order_total += item_total
                order_items.append({
                    'product_id': product['id'],
                    'product_name': product['name'],
                    'quantity': quantity,
                    'price': product['price'],
                    'total': item_total
                })
                
                # Update stock
                product['stock'] -= quantity
        
        # Save updated products
        save_json(PRODUCTS_DB, products)
        
        # Create order
        orders = load_json(ORDERS_DB)
        order = {
            'id': len(orders) + 1,
            'customer_name': name,
            'customer_email': email,
            'customer_address': address,
            'payment_method': payment_method,
            'items': order_items,
            'total': order_total,
            'status': 'Processing',
            'order_date': datetime.now().isoformat()
        }
        orders.append(order)
        save_json(ORDERS_DB, orders)
        
        # Clear cart
        session['cart'] = {}
        session.modified = True
        
        return redirect(url_for('order_confirmation', order_id=order['id']))
    
    # GET request - show checkout form
    if not cart_items:
        return redirect(url_for('home'))
    
    return render_template('checkout.html', cart_items=cart_items, total=total)

@app.route('/order_confirmation/<int:order_id>')
def order_confirmation(order_id):
    """Order confirmation page"""
    orders = load_json(ORDERS_DB)
    order = next((o for o in orders if o['id'] == order_id), None)
    if not order:
        return "Order not found", 404
    return render_template('order_confirmation.html', order=order)

@app.route('/api/cart_count')
def cart_count():
    """API endpoint to get cart count"""
    cart = session.get('cart', {})
    return jsonify({'count': sum(cart.values())})

if __name__ == '__main__':
    init_database()
    app.run(debug=True, host='0.0.0.0', port=5000)
